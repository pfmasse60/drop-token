{
  "service": {
    "service": "drop-token",
    "serviceObject": {
      "name": "drop-token"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "stage": "drop-token",
      "region": "us-east-1",
      "lambdaHashingVersion": "20201221",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": {
            "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/GameTable"
          }
        }
      ],
      "environment": {
        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
        "gameTableName": "GameTable",
        "gameState": "IN_PROGRESS",
        "IS_OFFLINE": "true"
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateNewGameLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/createNewGame"
            }
          },
          "QuitPlayerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/quitPlayer"
            }
          },
          "GetGameStateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/getGameState"
            }
          },
          "GetMovesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/getMoves"
            }
          },
          "PostMoveLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/postMove"
            }
          },
          "ReturnAllGamesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/returnAllGames"
            }
          },
          "GetSingleMoveLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/getSingleMove"
            }
          },
          "TestFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/testFunction"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "drop-token",
                        "drop-token",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/createNewGame:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/quitPlayer:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/getGameState:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/getMoves:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/postMove:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/returnAllGames:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/getSingleMove:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/testFunction:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/createNewGame:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/quitPlayer:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/getGameState:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/getMoves:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/postMove:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/returnAllGames:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/getSingleMove:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/testFunction:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "drop-token",
                    "drop-token",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateNewGameLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/drop-token/drop-token/1630337366655-2021-08-30T15:29:26.655Z/createNewGame.zip"
              },
              "Handler": "src/functions/createNewGame.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "createNewGame",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "Create a new drop token game",
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "gameTableName": "GameTable",
                  "gameState": "IN_PROGRESS",
                  "IS_OFFLINE": "true"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateNewGameLogGroup"
            ]
          },
          "QuitPlayerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/drop-token/drop-token/1630337366655-2021-08-30T15:29:26.655Z/quitPlayer.zip"
              },
              "Handler": "src/functions/quitPlayer.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "quitPlayer",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "gameTableName": "GameTable",
                  "gameState": "IN_PROGRESS",
                  "IS_OFFLINE": "true"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "QuitPlayerLogGroup"
            ]
          },
          "GetGameStateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/drop-token/drop-token/1630337366655-2021-08-30T15:29:26.655Z/getGameState.zip"
              },
              "Handler": "src/functions/getGameState.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "getGameState",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "gameTableName": "GameTable",
                  "gameState": "IN_PROGRESS",
                  "IS_OFFLINE": "true"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetGameStateLogGroup"
            ]
          },
          "GetMovesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/drop-token/drop-token/1630337366655-2021-08-30T15:29:26.655Z/getMoves.zip"
              },
              "Handler": "src/functions/getMoves.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "getMoves",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "gameTableName": "GameTable",
                  "gameState": "IN_PROGRESS",
                  "IS_OFFLINE": "true"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetMovesLogGroup"
            ]
          },
          "PostMoveLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/drop-token/drop-token/1630337366655-2021-08-30T15:29:26.655Z/postMove.zip"
              },
              "Handler": "src/functions/postMove.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "postMove",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "gameTableName": "GameTable",
                  "gameState": "IN_PROGRESS",
                  "IS_OFFLINE": "true"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PostMoveLogGroup"
            ]
          },
          "ReturnAllGamesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/drop-token/drop-token/1630337366655-2021-08-30T15:29:26.655Z/returnAllGames.zip"
              },
              "Handler": "src/functions/returnAllGames.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "returnAllGames",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "gameTableName": "GameTable",
                  "gameState": "IN_PROGRESS",
                  "IS_OFFLINE": "true"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReturnAllGamesLogGroup"
            ]
          },
          "GetSingleMoveLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/drop-token/drop-token/1630337366655-2021-08-30T15:29:26.655Z/getSingleMove.zip"
              },
              "Handler": "src/functions/getSingleMove.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "getSingleMove",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "gameTableName": "GameTable",
                  "gameState": "IN_PROGRESS",
                  "IS_OFFLINE": "true"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSingleMoveLogGroup"
            ]
          },
          "TestFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/drop-token/drop-token/1630337366655-2021-08-30T15:29:26.655Z/testFunction.zip"
              },
              "Handler": "src/functions/testFunction.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "testFunction",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "gameTableName": "GameTable",
                  "gameState": "IN_PROGRESS",
                  "IS_OFFLINE": "true"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TestFunctionLogGroup"
            ]
          },
          "CreateNewGameLambdaVersionhMGe7vLMLCEYXSI3RAbM8OyLdyNxzhZ0xt5VRdXpA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateNewGameLambdaFunction"
              },
              "CodeSha256": "QwG2OroxtfbfjC+iF2Uw4YZqo05qdaeLLntapgfR2D4=",
              "Description": "Create a new drop token game"
            }
          },
          "GetMovesLambdaVersion0CEZZtnWV0NmudyX4SgwwteMaDmXnbhCE7arYahbfQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetMovesLambdaFunction"
              },
              "CodeSha256": "QwG2OroxtfbfjC+iF2Uw4YZqo05qdaeLLntapgfR2D4="
            }
          },
          "GetGameStateLambdaVersionyVj3pQCBV3uXI6awRMIlVTWfRSF1Fs9AQ68W4Tis": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetGameStateLambdaFunction"
              },
              "CodeSha256": "QwG2OroxtfbfjC+iF2Uw4YZqo05qdaeLLntapgfR2D4="
            }
          },
          "QuitPlayerLambdaVersionEEgugDMpz1uZUkPZM0jTLhzie1thN1ssvTPF6NstI00": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "QuitPlayerLambdaFunction"
              },
              "CodeSha256": "QwG2OroxtfbfjC+iF2Uw4YZqo05qdaeLLntapgfR2D4="
            }
          },
          "PostMoveLambdaVersionZ4KM2UXXIF7BbsBmaa6k30NWtAHvZniLpeW6s1Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PostMoveLambdaFunction"
              },
              "CodeSha256": "QwG2OroxtfbfjC+iF2Uw4YZqo05qdaeLLntapgfR2D4="
            }
          },
          "GetSingleMoveLambdaVersionQ5OUVqZP96pJ2Xtvx8wY3zn2PqoW29QYWcO1xp1g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSingleMoveLambdaFunction"
              },
              "CodeSha256": "QwG2OroxtfbfjC+iF2Uw4YZqo05qdaeLLntapgfR2D4="
            }
          },
          "ReturnAllGamesLambdaVersionxwyuAkG7C04isI5KOQ3ZJIBeD0tq67KquyaY683I3A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ReturnAllGamesLambdaFunction"
              },
              "CodeSha256": "QwG2OroxtfbfjC+iF2Uw4YZqo05qdaeLLntapgfR2D4="
            }
          },
          "TestFunctionLambdaVersionndyAnjS8T0LMJfkitl9r5dsBPrwvOdFeI6rNqUFkk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TestFunctionLambdaFunction"
              },
              "CodeSha256": "QwG2OroxtfbfjC+iF2Uw4YZqo05qdaeLLntapgfR2D4="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "drop-token-drop-token",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "CreateNewGameLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateNewGameLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateNewGame": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateNewGameLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePost": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateNewGame"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateNewGame"
          },
          "QuitPlayerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "QuitPlayerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationQuitPlayer": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"QuitPlayerLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePutGameidVarPlayeridVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /{gameId}/{playerId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationQuitPlayer"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationQuitPlayer"
          },
          "GetGameStateLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetGameStateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetGameState": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetGameStateLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetGameidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /{gameId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetGameState"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetGameState"
          },
          "GetMovesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetMovesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetMoves": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetMovesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetGameidVarMoves": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /{gameId}/moves",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetMoves"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetMoves"
          },
          "PostMoveLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PostMoveLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationPostMove": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PostMoveLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePostGameidVarPlayeridVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /{gameId}/{playerId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationPostMove"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationPostMove"
          },
          "ReturnAllGamesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ReturnAllGamesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationReturnAllGames": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ReturnAllGamesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGet": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationReturnAllGames"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationReturnAllGames"
          },
          "GetSingleMoveLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSingleMoveLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetSingleMove": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetSingleMoveLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetGameidVarMovesMovenumberVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /{gameId}/moves/{move_number}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetSingleMove"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetSingleMove"
          },
          "TestFunctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TestFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationTestFunction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"TestFunctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePatch": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationTestFunction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationTestFunction"
          },
          "GameTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "GameTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "itemType",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "Id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "gameId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "itemType",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "Id",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "MoveNumberIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "gameId",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "itemType",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 1,
                    "WriteCapacityUnits": 1
                  }
                },
                {
                  "IndexName": "PlayerIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "gameId",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "Id",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 1,
                    "WriteCapacityUnits": 1
                  }
                },
                {
                  "IndexName": "CounterIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "itemType",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "gameId",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 1,
                    "WriteCapacityUnits": 1
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-drop-token-drop-token-ServerlessDeploymentBucketName"
            }
          },
          "CreateNewGameLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateNewGameLambdaVersionhMGe7vLMLCEYXSI3RAbM8OyLdyNxzhZ0xt5VRdXpA"
            },
            "Export": {
              "Name": "sls-drop-token-drop-token-CreateNewGameLambdaFunctionQualifiedArn"
            }
          },
          "GetMovesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetMovesLambdaVersion0CEZZtnWV0NmudyX4SgwwteMaDmXnbhCE7arYahbfQ"
            },
            "Export": {
              "Name": "sls-drop-token-drop-token-GetMovesLambdaFunctionQualifiedArn"
            }
          },
          "GetGameStateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetGameStateLambdaVersionyVj3pQCBV3uXI6awRMIlVTWfRSF1Fs9AQ68W4Tis"
            },
            "Export": {
              "Name": "sls-drop-token-drop-token-GetGameStateLambdaFunctionQualifiedArn"
            }
          },
          "QuitPlayerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "QuitPlayerLambdaVersionEEgugDMpz1uZUkPZM0jTLhzie1thN1ssvTPF6NstI00"
            },
            "Export": {
              "Name": "sls-drop-token-drop-token-QuitPlayerLambdaFunctionQualifiedArn"
            }
          },
          "PostMoveLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PostMoveLambdaVersionZ4KM2UXXIF7BbsBmaa6k30NWtAHvZniLpeW6s1Y"
            },
            "Export": {
              "Name": "sls-drop-token-drop-token-PostMoveLambdaFunctionQualifiedArn"
            }
          },
          "GetSingleMoveLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSingleMoveLambdaVersionQ5OUVqZP96pJ2Xtvx8wY3zn2PqoW29QYWcO1xp1g"
            },
            "Export": {
              "Name": "sls-drop-token-drop-token-GetSingleMoveLambdaFunctionQualifiedArn"
            }
          },
          "ReturnAllGamesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ReturnAllGamesLambdaVersionxwyuAkG7C04isI5KOQ3ZJIBeD0tq67KquyaY683I3A"
            },
            "Export": {
              "Name": "sls-drop-token-drop-token-ReturnAllGamesLambdaFunctionQualifiedArn"
            }
          },
          "TestFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TestFunctionLambdaVersionndyAnjS8T0LMJfkitl9r5dsBPrwvOdFeI6rNqUFkk"
            },
            "Export": {
              "Name": "sls-drop-token-drop-token-TestFunctionLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-drop-token-drop-token-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-drop-token-drop-token-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "tablename": "GameTable",
      "dynamodb": {
        "stages": [
          "dev",
          "drop-token"
        ],
        "start": {
          "port": 8000,
          "inMemory": true,
          "migrate": true
        },
        "migration": {
          "dir": "offline/migrations"
        }
      }
    },
    "plugins": [
      "serverless-plugin-typescript",
      "serverless-pseudo-parameters",
      "serverless-dynamodb-local",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "createNewGame": {
        "handler": "src/functions/createNewGame.handler",
        "name": "createNewGame",
        "description": "Create a new drop token game",
        "events": [
          {
            "httpApi": {
              "path": "/",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/"
          }
        ],
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "artifact": "/Users/apple/Projects/drop-token/.serverless/createNewGame.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateNewGameLambdaVersionhMGe7vLMLCEYXSI3RAbM8OyLdyNxzhZ0xt5VRdXpA"
      },
      "quitPlayer": {
        "handler": "src/functions/quitPlayer.handler",
        "name": "quitPlayer",
        "events": [
          {
            "httpApi": {
              "path": "/{gameId}/{playerId}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/{gameId}/{playerId}"
          }
        ],
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "artifact": "/Users/apple/Projects/drop-token/.serverless/quitPlayer.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "QuitPlayerLambdaVersionEEgugDMpz1uZUkPZM0jTLhzie1thN1ssvTPF6NstI00"
      },
      "getGameState": {
        "handler": "src/functions/getGameState.handler",
        "name": "getGameState",
        "events": [
          {
            "httpApi": {
              "path": "/{gameId}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/{gameId}"
          }
        ],
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "artifact": "/Users/apple/Projects/drop-token/.serverless/getGameState.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetGameStateLambdaVersionyVj3pQCBV3uXI6awRMIlVTWfRSF1Fs9AQ68W4Tis"
      },
      "getMoves": {
        "handler": "src/functions/getMoves.handler",
        "name": "getMoves",
        "events": [
          {
            "httpApi": {
              "path": "/{gameId}/moves",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/{gameId}/moves"
          }
        ],
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "artifact": "/Users/apple/Projects/drop-token/.serverless/getMoves.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetMovesLambdaVersion0CEZZtnWV0NmudyX4SgwwteMaDmXnbhCE7arYahbfQ"
      },
      "postMove": {
        "handler": "src/functions/postMove.handler",
        "name": "postMove",
        "events": [
          {
            "httpApi": {
              "path": "/{gameId}/{playerId}",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/{gameId}/{playerId}"
          }
        ],
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "artifact": "/Users/apple/Projects/drop-token/.serverless/postMove.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "PostMoveLambdaVersionZ4KM2UXXIF7BbsBmaa6k30NWtAHvZniLpeW6s1Y"
      },
      "returnAllGames": {
        "handler": "src/functions/returnAllGames.handler",
        "name": "returnAllGames",
        "events": [
          {
            "httpApi": {
              "path": "/",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/"
          }
        ],
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "artifact": "/Users/apple/Projects/drop-token/.serverless/returnAllGames.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ReturnAllGamesLambdaVersionxwyuAkG7C04isI5KOQ3ZJIBeD0tq67KquyaY683I3A"
      },
      "getSingleMove": {
        "handler": "src/functions/getSingleMove.handler",
        "name": "getSingleMove",
        "events": [
          {
            "httpApi": {
              "path": "/{gameId}/moves/{move_number}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/{gameId}/moves/{move_number}"
          }
        ],
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "artifact": "/Users/apple/Projects/drop-token/.serverless/getSingleMove.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetSingleMoveLambdaVersionQ5OUVqZP96pJ2Xtvx8wY3zn2PqoW29QYWcO1xp1g"
      },
      "testFunction": {
        "handler": "src/functions/testFunction.handler",
        "name": "testFunction",
        "events": [
          {
            "httpApi": {
              "path": "/",
              "method": "PATCH"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/"
          }
        ],
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "artifact": "/Users/apple/Projects/drop-token/.serverless/testFunction.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "TestFunctionLambdaVersionndyAnjS8T0LMJfkitl9r5dsBPrwvOdFeI6rNqUFkk"
      }
    },
    "resources": {
      "Resources": {
        "GameTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "GameTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "itemType",
                "AttributeType": "S"
              },
              {
                "AttributeName": "Id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "gameId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "itemType",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "Id",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "MoveNumberIndex",
                "KeySchema": [
                  {
                    "AttributeName": "gameId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "itemType",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 1,
                  "WriteCapacityUnits": 1
                }
              },
              {
                "IndexName": "PlayerIndex",
                "KeySchema": [
                  {
                    "AttributeName": "gameId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "Id",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 1,
                  "WriteCapacityUnits": 1
                }
              },
              {
                "IndexName": "CounterIndex",
                "KeySchema": [
                  {
                    "AttributeName": "itemType",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "gameId",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 1,
                  "WriteCapacityUnits": 1
                }
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "error",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": "2",
      "configValidationMode": "error",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "individually": true,
        "artifactDirectoryName": "serverless/drop-token/drop-token/1630337366655-2021-08-30T15:29:26.655Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/drop-token/drop-token/1630337366655-2021-08-30T15:29:26.655Z",
    "artifact": ""
  }
}